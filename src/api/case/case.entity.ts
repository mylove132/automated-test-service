import {Column, CreateDateColumn, Entity, ManyToMany, ManyToOne, OneToMany, PrimaryGeneratedColumn, UpdateDateColumn} from 'typeorm';
import {ParamType, RequestType} from './dto/http.enum';
import {CatalogEntity} from '../catalog/catalog.entity';
import {HistoryEntity} from '../history/history.entity';
import {CaselistEntity} from '../caselist/caselist.entity';


@Entity('case')
export class CaseEntity {

    @PrimaryGeneratedColumn()
    id: number;

    @Column({comment: "用例名称"})
    name: string;

    @Column('json', {default: '{}', nullable: true, comment: '请求接口的header信息'})
    header: string;

    @Column({nullable: true, comment: '请求接口的参数信息'})
    param: string;

    @Column('enum',{default: ParamType.TEXT, nullable: false, enum: ParamType, comment: '参数类型'})
    paramType: ParamType;

    @Column({comment: '请求接口的路径'})
    path: string;

    @Column({comment: '请求接口的前缀'})
    endpoint: string;

    @Column('enum', {default: RequestType.GET, nullable:false, comment: '请求接口的类型', enum: RequestType})
    type: RequestType;

    @ManyToOne(type => CatalogEntity, catalog => catalog.cases)
    catalog: CatalogEntity;

    @OneToMany(type => HistoryEntity, history => history.case)
    histories: HistoryEntity[];

    @CreateDateColumn()
    createDate: Date;

    @UpdateDateColumn()
    updateDate: Date;

    @Column({comment: '断言内容'})
    assertText: string;

    @ManyToMany(type => CaselistEntity, caselist => caselist.cases)
    caseLists: CaselistEntity[];
}
















































































































































































































































































































































































































































































































